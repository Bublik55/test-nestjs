swagger: '3.0'
info:
  version: 0.0.1
  title: "Foo"
  description: Test Task for Purrweb
schemes: 
- https 
host: test.testo
basePath: "/"
securityDefinitions:
  UserSecurity:
    type: basic
security:
  - UserSecurity: [] 
consumes:
      - "application/json"
produces:
      - "application/json"
paths:
  /users:
    get:
     summary: "Get all users"
     operationId: "getUsers"
     tags:  
      - "users"
     responses:
        "200":
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/User"
          description: "All reistred users"
        "404":
          description: "Users not found"
  /users/login:
    get:
      operationId: "loginUser"
      tags: 
      - "users"
      summary: "Auth user"
      parameters:
      - name: "username"
        in: "query"
        description: "The username for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"  
  /users/register:
    post:
      summary: "Register user"
      operationId: "registerUser"
      tags:
          - "users"
      parameters:
      - name: "username"
        in: "query"
        description: "The username for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        404:
          description: "Username already exists"
  /users/{id}:
    get:
      summary: "Get User by ID"
      tags:
      - "users"
      operationId: "getUser"
      description: "get user by id"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "User not found"
    delete:
      summary: "Delete user with current ID"
      operationId: "deleteUser"
      tags:
          - "users"
      parameters:    
        - in: "path"
          name: "id"
          type: "integer"
          description: "Change information about user"
          required: true    
      description: "delete user from service"
      responses:
        "200":
          description: "User deleted"
        "400":
          description: "User not found"
  /columns:
    get:
      tags:
       - "Columns"
      responses:
          "200":
            description: "Columns getted"
            schema:            
              type: "array"
              items:
                $ref: '#/definitions/Comment'
          "400":
            description: "Can't get columns"    
    post:
      tags:
          - "Columns"
      operationId: "addColumns"
      summary: "Add product to store"
      parameters:
       - in: "body"
         name: "body"
         schema: 
           $ref: "#/definitions/Column"
         required: true
      responses:
        "200": 
          description: "Columns placed"
        "400":
          description: "Can't place columns"    
  /columns/{id}:
    get:
      tags: 
          - "Columns"
      summary: "Get product with current ID"
      operationId: "getProductById"
      parameters:
       - in: "path"
         name: "id"
         type: integer
         description: "Get products"
         required: true   
      responses:
        "200":
          description: "Information about product"
          schema:
           type: "array"
           items:
             $ref: "#/definitions/Comment"
        "400":
          description: "Can't get products with current ID"    
    put:
      tags:
          - "Columns"
      summary: "Update information about product"
      parameters:
       - in: "path"
         name: "id"
         type: integer
         required: true 
         description: "update product"
       - in: "body"
         name: "body"
         schema: 
           $ref: "#/definitions/Comment"
         required: true    
      responses:
        "200":
          description: "Information about product updated"
          schema: 
           $ref: "#/definitions/Comment"
        "400":
          description: "Invalid values"
    delete:
      summary: "Delete column with current ID"
      operationId: "deleteById"
      parameters:
       - in: "path"
         name: "id"
         type: integer
         required: true 
      tags:
          - "Columns"
      description: "Delete Column"
      responses:
        "200":
          description: "Column deleted"
        "400":
          description: "Product not found or user has no rigth"
  /cards:
    post:
        summary: "Place card"
        operationId: "placeCard"
        tags: 
          - "Cards"
        parameters:
        - in: "body"
          name: "body"
          schema: 
            $ref: "#/definitions/Comment"
          required: true
        responses:
          "200":
            description: "Card created"
          "400":
            description: "Card can't be placed"
        deprecated: false
  /orders/{id}:
    get:
      tags:
          - "orders"
      summary: "Get card by ID"
      parameters:
       - in: "path"
         name: "id"
         type: integer
         required: true  
         description: "Get information about order"
      responses:
        "200":
          description: "Operation success"
          schema: 
           $ref: "#def"
        "404":
          description: "Card not found"
    put:
      summary: "Update order's status"
      operationId: "updateOrderStatus"
      tags:
        - "orders"
      parameters:
       - in: "path"
         name: "id"
         type: integer
         description: "Order's ID"
         required: true  
       - in: "body"
         name: "body"
         schema: 
          $ref: "#/definitions/Comment"
         required: true      
      description: "Update order's status, if user is courier"
      responses:
        "200":
          description: "Status updated"
        "400":
          description: "Changes canceled"
  /users/{id}/orders:
    get:
      summary: "Get all orders of current user"
      operationId: "getOrdersByUserId"
      tags: 
        - "orders"
      parameters:
       - in: "path"
         name: "id"
         type: integer
         description: "Get list of products"
         required: true  
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items: 
             $ref: "#/definitions/Comment"
        "404":
          description: "User not found"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      columns:
        type: "array"
        items:
          $ref: "#/definitions/Column"
  Column:
    type: "object"
    properties:
      id:
        type: "integer"
      userId:
        type: "integer"
      content:
        type: "string"
      cards: 
        type: "array"
        items: 
          $ref: "#/definitions/Card"
  Card:
    type: "object"
    properties:
     id: 
      type: "integer"
     name: 
      type: "string"
     description:
      type: "string"
     price:
      type: "number"
     comments:
      type: "array"
      items: 
        $ref: "#/definitions/Comment"
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
      cardID:
        type: "integer"
      content:
        type: "string"
